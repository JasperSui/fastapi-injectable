name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed

permissions:
  contents: write
  id-token: write

jobs:
  test-release:
    name: TestPyPI Release
    if: >
      (github.event.pull_request.merged == false) &&
      startsWith(github.head_ref, 'release/') &&
      (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=requirements/constraints.txt pip setuptools
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=requirements/constraints.txt poetry
          poetry --version

      - name: Bump version for TestPyPI release
        run: |
          CURRENT_VERSION=$(poetry version | awk '{ print $2 }')
          poetry version $CURRENT_VERSION.dev.$(date +%s)

      - name: Build package
        run: |
          poetry build --ansi

      - name: Publish package on TestPyPI
        uses: pypa/gh-action-pypi-publish@67339c736fd9354cd4f8cb0b744f2b82a74b5c70 # v1.12.3
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true


  release:
    name: PyPI Release
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=requirements/constraints.txt pip setuptools
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=requirements/constraints.txt poetry
          poetry --version

      - name: Check version change
        id: version-check
        run: |
          CURRENT_VERSION=$(poetry version | awk '{ print $2 }')
          git checkout HEAD^
          PREVIOUS_VERSION=$(poetry version | awk '{ print $2 }')
          git checkout -
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        id: create-tag
        if: steps.version-check.outputs.changed == 'true'
        run: |
          VERSION=${{ steps.version-check.outputs.version }}
          if git tag -a "v${VERSION}" -m "Release version ${VERSION}" 2>/dev/null; then
            if git push origin "v${VERSION}" 2>/dev/null; then
              echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
              echo "tag_created=true" >> $GITHUB_OUTPUT
            else
              echo "Failed to push tag v${VERSION}"
              exit 1
            fi
          else
            echo "Failed to create tag v${VERSION}"
            exit 1
          fi

      - name: Build package
        run: |
          poetry build --ansi

      - name: Publish package on PyPI
        if: steps.version-check.outputs.changed == 'true'
        uses: pypa/gh-action-pypi-publish@67339c736fd9354cd4f8cb0b744f2b82a74b5c70 # v1.12.3
        with:
          verbose: true

      - name: Publish the release notes
        uses: release-drafter/release-drafter@3f0f87098bd6b5c5b9a36d49c41d998ea58f9348 # v6.0.0
        with:
          publish: ${{ steps.version-check.outputs.changed == 'true' }}
          tag: ${{ steps.version-check.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
